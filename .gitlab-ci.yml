stages:
  - nx
  - lint
  - renovate
  - docker
  - deploy

.nx-install: &nx-install
  - npm install -g @antfu/ni pnpm
  - nci
  - apk add git

.docker: &docker
  image: docker:24.0.7
  services:
    - name: docker:24.0.7-dind
      alias: docker-service
  cache:
    key: deps
    paths:
      - node_modules
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker-service:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add npm
    - *nx-install
    - docker info
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - docker buildx create --name container --driver=docker-container
    - nr docker:build-workspace

.ssh: &ssh
  image: ringcentral/sshpass
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - grep "${KNOWN_HOST_PUB}" ~/.ssh/known_hosts || echo "${KNOWN_HOST_PUB}" > ~/.ssh/known_hosts
    - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa

nx-workspace:
  image: node:20-alpine
  stage: nx
  cache:
    key: deps
    paths:
      - node_modules
  before_script:
    - *nx-install
  script:
    - npx nx affected -t format:check
    - npx nx affected -t lint
    - npx nx affected -t test
    - npx nx affected -t build -c production
  except:
    - master

sonarqube-scanner:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: lint
  script:
    - sonar-scanner
  allow_failure: true

build-renovate:
  <<: *docker
  stage: renovate
  script:
    - npx nx affected -t build-image --exclude="*,!server-renovate"
  except:
    - master

run-renovate:
  <<: *ssh
  stage: renovate
  script:
    - scp ./apps/server/docker-compose-renovate.yml ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/docker-compose-renovate.yml up --pull always renovate
  except:
    - master

docker:
  <<: *docker
  stage: docker
  script:
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - npx nx affected --base=remotes/origin/master~1 -t build-image
  only:
    - master

deploy:
  <<: *ssh
  stage: deploy
  script:
    # copy compose file and scripts
    - scp ./apps/server/docker-compose.yml ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/
    - scp ./libs/server/scripts/*.sh ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/
    # copy system scripts
    - ssh ${SSH_USER}@${SSH_HOST} mkdir -p /tmp/scripts/cron.d /tmp/scripts/systemd/system
    - scp ./libs/server/scripts/etc/cron.d/* ${SSH_USER}@${SSH_HOST}:/tmp/scripts/cron.d
    - scp ./libs/server/scripts/etc/systemd/system/* ${SSH_USER}@${SSH_HOST}:/tmp/scripts/systemd/system
    # change system-script ownership
    - ssh ${SSH_USER}@${SSH_HOST} sudo chown root:root /tmp/scripts/cron.d/*
    - ssh ${SSH_USER}@${SSH_HOST} sudo chown root:root /tmp/scripts/systemd/system/*
    # move system-scripts
    - ssh ${SSH_USER}@${SSH_HOST} sudo mv /tmp/scripts/cron.d/* /etc/cron.d/
    - ssh ${SSH_USER}@${SSH_HOST} sudo mv /tmp/scripts/systemd/system/* /etc/systemd/system/
    # reload systemd
    - ssh ${SSH_USER}@${SSH_HOST} sudo systemctl daemon-reload
    # pull and run docker containers
    - ssh ${SSH_USER}@${SSH_HOST} docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/docker-compose.yml pull
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/docker-compose.yml up -d
  only:
    - master
