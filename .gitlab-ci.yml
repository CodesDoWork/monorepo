stages:
  - nx
  - lint
  - env
  - docker
  - renovate
  - deploy

.nx-install: &nx-install
  - apk add git
  - npm install -g @antfu/ni pnpm
  - pnpm config set store-dir .pnpm-store
  - nci

.pnpm-store-cache: &pnpm-store-cache
  cache:
    key: pnpm-store
    paths:
      - .pnpm-store/

.docker: &docker
  image: docker:25.0.3
  stage: docker
  services:
    - name: docker:25.0.3-dind
      alias: docker-service
  <<: *pnpm-store-cache
  variables:
    DOCKER_HOST: tcp://docker-service:2375/
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add npm
    - *nx-install
    - docker info
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - nr docker:build-workspace
    - touch apps/server/.env apps/server/music/.env apps/server/scoreboard/.env.local

.ssh: &ssh
  image: alpine:latest
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - grep "${KNOWN_HOST_PUB}" ~/.ssh/known_hosts || echo "${KNOWN_HOST_PUB}" > ~/.ssh/known_hosts
    - echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa

nx-workspace:
  image: node:20-alpine
  stage: nx
  <<: *pnpm-store-cache
  before_script:
    - *nx-install
  script:
    - npx nx affected -t format:check
    - npx nx affected -t lint
    - npx nx affected -t test
    - npx nx affected -t build -c production
  except:
    - master
  resource_group: single

docker-test:
  <<: *docker
  script:
    - nx affected -t build-image --parallel 1
  only:
    - docker-test/*
  resource_group: single

sonarqube-scanner:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: lint
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - master
  resource_group: single

copy-env:
  <<: *ssh
  stage: env
  script:
    - scp .env ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/../.env
  only:
    - master
  resource_group: single

docker:
  <<: *docker
  script:
    - npx nx affected --base=remotes/origin/master~1 -t build-image --parallel 1
    - npx nx build-image server-documentation
    - npx nx build-image server-renovate
  only:
    - master
  resource_group: single

run-renovate:
  <<: *ssh
  stage: renovate
  script:
    - scp ./apps/server/renovate/docker-compose.yml ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/renovate
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/renovate/docker-compose.yml --env-file ${SSH_PATH}/../.env --env-file ${SSH_PATH}/.env --env-file ${SSH_PATH}/renovate/.env  up --pull always renovate
  only:
    - master
  resource_group: single

deploy:
  <<: *ssh
  stage: deploy
  script:
    # copy compose file and scripts
    - scp ./apps/server/docker-compose.yml ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/
    - scp ./libs/server/scripts/*.sh ${SSH_USER}@${SSH_HOST}:${SSH_PATH}/
    # copy system scripts
    - ssh ${SSH_USER}@${SSH_HOST} mkdir -p /tmp/scripts/cron.d /tmp/scripts/systemd/system
    - scp ./libs/server/scripts/etc/cron.d/* ${SSH_USER}@${SSH_HOST}:/tmp/scripts/cron.d
    - scp ./libs/server/scripts/etc/systemd/system/* ${SSH_USER}@${SSH_HOST}:/tmp/scripts/systemd/system
    # change system-script ownership
    - ssh ${SSH_USER}@${SSH_HOST} sudo chown root:root /tmp/scripts/cron.d/*
    - ssh ${SSH_USER}@${SSH_HOST} sudo chown root:root /tmp/scripts/systemd/system/*
    # move system-scripts
    - ssh ${SSH_USER}@${SSH_HOST} sudo mv /tmp/scripts/cron.d/* /etc/cron.d/
    - ssh ${SSH_USER}@${SSH_HOST} sudo mv /tmp/scripts/systemd/system/* /etc/systemd/system/
    # reload systemd
    - ssh ${SSH_USER}@${SSH_HOST} sudo systemctl daemon-reload
    # pull and run docker containers
    - ssh ${SSH_USER}@${SSH_HOST} docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY}
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/docker-compose.yml pull
    - ssh ${SSH_USER}@${SSH_HOST} docker compose -f ${SSH_PATH}/docker-compose.yml --profile always --profile day up -d --remove-orphans
  only:
    - master
  resource_group: single
