x-build-args:
  build: &build-args
    args:
      - DOCKER_REGISTRY
      - ORGANIZATION
      - PROJECT

services:
  auth:
    command:
      - start
      - --db=postgres
      - --db-url-host=db
      - --db-username=${DB_USER}
      - --db-password=${DB_PASSWORD}
      - --hostname-strict=false
      - --http-enabled=true
      - --health-enabled=true
      - --metrics-enabled=true
      - --features=docker,token-exchange
      - --proxy=edge
    depends_on:
      db:
        condition: service_healthy
    environment:
      - KEYCLOAK_ADMIN=${AUTH_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${AUTH_PASSWORD}
    image: quay.io/keycloak/keycloak:23.0.7
    restart: unless-stopped

  backup-service:
    build:
      context: ./backup-service
    environment:
      - PUID=0
      - GUID=0
      - TZ=${TZ}
    image: ${IMAGE_BASE}/server-backup-service
    restart: unless-stopped
    volumes:
      - ${BACKUP_VOLUME_PATH}/.snapshots:/.snapshots
      # - ${BACKUP_PC_PATH}:/data/pc:ro
      - bitwarden-data:/data/services/bitwarden/data:ro
      - ghost-content:/data/services/ghost/content:ro
      - gitlab-config:/data/services/gitlab/config:ro
      - gitlab-data:/data/services/gitlab/data:ro
      - gitlab-runner-config:/data/services/gitlab-runner/config:ro
      - grafana-storage:/data/services/grafana/storage:ro
      - grafana-config:/data/services/grafana/config:ro
      - mysql-data:/data/services/mysql/data:ro
      - navidrome-data:/data/services/navidrome/data:ro
      - netdata-config:/data/services/netdata/config:ro
      - netdata-lib:/data/services/netdata/lib:ro
      - netdata-cache:/data/services/netdata/cache:ro
      - portainer-data:/data/services/portainer/data:ro
      - postgres-data:/data/services/db/data:ro
      - prometheus-data:/data/services/prometheus/data:ro
      - sonarqube-config:/data/services/sonarqube/config:ro
      - sonarqube-data:/data/services/sonarqube/data:ro
      - sonarqube-extensions:/data/services/sonarqube/extensions:ro
      - vpn-data:/data/services/vpn/data:ro

  bitwarden:
    environment:
      - TZ=${TZ}
      - PUID=1000
      - PGID=1000
      - DOMAIN=https://${BITWARDEN_DOMAIN}
      - IP_HEADER=X-Forwarded-For
      - SIGNUPS_ALLOWED=false
      - ADMIN_TOKEN=${BITWARDEN_ADMIN_TOKEN}
      - INVITATION_ORG_NAME=Bitwarden
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_FROM=no-reply@${BITWARDEN_DOMAIN}
      - SMTP_FROM_NAME=Bitwarden
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURITY=starttls
      - SMTP_USERNAME=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    image: vaultwarden/server:alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - bitwarden-data:/data

  dashboard:
    build:
      <<: *build-args
      context: ../..
      dockerfile: apps/server/dashboard/Dockerfile
    image: ${IMAGE_BASE}/server-dashboard
    restart: unless-stopped

  db:
    environment:
      - POSTGRES_DB=${DB_DEFAULT_DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: pg_isready -U $DB_USER
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data

  docker-registry:
    environment:
      - REGISTRY_AUTH_TOKEN_REALM=https://${AUTH_DOMAIN}/realms/${AUTH_REALM}/protocol/docker-v2/auth
      - REGISTRY_AUTH_TOKEN_SERVICE=docker-registry
      - REGISTRY_AUTH_TOKEN_ISSUER=https://${AUTH_DOMAIN}/realms/${AUTH_REALM}
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/opt/certs/trust_chain.pem # exported from keycloak
    healthcheck:
      test: wget -S http://localhost:${DOCKER_REGISTRY_PORT}/v2/ 2>&1 | grep "401 Unauthorized" || exit 1
    image: registry:2
    restart: unless-stopped
    volumes:
      - docker-registry:/var/lib/registry
      - ./docker-registry/certs:/opt/certs:ro

  documentation:
    build:
      <<: *build-args
      context: ../..
      dockerfile: apps/server/documentation/Dockerfile
    healthcheck:
      test: wget -qO- http://localhost:${DOCUMENTATION_PORT} || exit 1
    image: ${IMAGE_BASE}/server-documentation
    restart: unless-stopped

  doku:
    image: amerkurev/doku
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/hostroot:ro

  gitlab:
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://${GITLAB_DOMAIN}'
        letsencrypt['enabled'] = false
        nginx['enable'] = true
        nginx['listen_https'] = false
        nginx['listen_port'] = ${GITLAB_PORT}
        gitlab_rails['smtp_enable'] = true
        gitlab_rails['smtp_address'] = "${SMTP_HOST}"
        gitlab_rails['smtp_port'] = ${SMTP_PORT}
        gitlab_rails['smtp_user_name'] = "${SMTP_USER}"
        gitlab_rails['smtp_password'] = "${SMTP_PASSWORD}"
        gitlab_rails['smtp_domain'] = "${SMTP_HOST}"
        gitlab_rails['smtp_authentication'] = "login"
        gitlab_rails['smtp_enable_starttls_auto'] = true
        gitlab_rails['smtp_tls'] = false
        gitlab_rails['smtp_openssl_verify_mode'] = 'peer'
        gitlab_rails['omniauth_enabled'] = true
        gitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect']
        gitlab_rails['omniauth_block_auto_created_users'] = false
        gitlab_rails['omniauth_auto_link_ldap_user'] = true
        gitlab_rails['omniauth_providers'] = [
          {
            "name" => "openid_connect",
            "label" => "Keycloak",
            "args" => {
              "name" => "openid_connect",
              "scope" => ["openid", "profile", "email"],
              "uid_field" => "email",
              "response_type" => "code",
              "issuer" => "https://${AUTH_DOMAIN}/realms/${AUTH_REALM}",
              "discovery" => true,
              "client_auth_method" => "query",
              "client_options" => {
                "identifier" => "${GITLAB_AUTH_CLIENT_ID}",
                "secret" => "${GITLAB_AUTH_CLIENT_SECRET}",
                "redirect_uri" => "https://${GITLAB_DOMAIN}/users/auth/openid_connect/callback"
              }
            }
          }
        ]
        puma['worker_processes'] = 1
        sidekiq['max_concurrency'] = 10
        gitaly['configuration'] = {
          concurrency: [
            {
              'rpc' => "/gitaly.SmartHTTPService/PostReceivePack",
              'max_per_repo' => 3,
            }, {
              'rpc' => "/gitaly.SSHService/SSHUploadPack",
              'max_per_repo' => 3,
            },
          ]
        }
        gitaly['env'] = {
          'GITALY_COMMAND_SPAWN_MAX_PARALLEL' => '2',
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
        }
        gitlab_rails['env'] = {
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
        }
        prometheus_monitoring['enable'] = true
    image: gitlab/gitlab-ee:latest
    restart: unless-stopped
    shm_size: "256m"
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-data:/var/opt/gitlab

  ghost:
    image: ghost:5
    cap_add:
      - CAP_SYS_NICE
    security_opt:
      - seccomp:unconfined
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      url: https://${GHOST_DOMAIN}
      database__client: mysql
      database__connection__host: mysql
      database__connection__user: root
      database__connection__password: ${MYSQL_PASS}
      database__connection__database: ghost
      mail__transport: SMTP
      mail__options__host: smtp.gmail.com
      mail__options__port: 587
      mail__options__secure: true
      mail__options__auth__user: ${SMTP_USER}
      mail__options__auth__pass: ${SMTP_PASSWORD}
    volumes:
      - ghost-content:/var/lib/ghost/content

  gitlab-runner:
    image: gitlab/gitlab-runner
    restart: unless-stopped
    volumes:
      - gitlab-runner-config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
    environment:
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    healthcheck:
      test: curl -fs http://localhost:${GRAFANA_PORT}/api/health | grep "ok" || exit 1
    image: grafana/grafana
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
      - grafana-config:/usr/share/grafana/conf

  just-site:
    build:
      <<: *build-args
      context: ../..
      dockerfile: apps/server/just-site/Dockerfile
    environment:
      - PORT=${SCOREBOARD_PORT}
    env_file:
      - ./just-site/.env
    image: ${IMAGE_BASE}/server-just-site
    restart: unless-stopped

  music:
    build:
      context: ./music # healthcheck implemented
    env_file:
      - ./music/.env
    environment:
      - ND_PORT=${MUSIC_PORT}
      - ND_REVERSEPROXYUSERHEADER=${NGINX_AUTH_USERNAME_HEADER}
      - ND_REVERSEPROXYWHITELIST=${MUSIC_PROXY_WHITELIST}
    image: ${IMAGE_BASE}/server-music
    restart: unless-stopped
    volumes:
      - navidrome-data:/data
      - ${MUSIC_VOLUME:-./music}:/music:ro

  music-downloader:
    build:
      <<: *build-args
      context: ../..
      dockerfile: apps/server/music-downloader/Dockerfile
    environment:
      - DOWNLOAD_DIR=/music/downloads
      - PORT=${MUSIC_DOWNLOADER_PORT}
    healthcheck:
      test: wget -qO- http://localhost:${MUSIC_DOWNLOADER_PORT}/api/trpc/health?input={} || exit 1
    image: ${IMAGE_BASE}/server-music-downloader
    restart: unless-stopped
    volumes:
      - ${MUSIC_VOLUME}/downloads:/music/downloads

  mysql:
    image: mysql:8
    security_opt:
      - seccomp:unconfined
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
    volumes:
      - mysql-data:/var/lib/mysql

  netdata:
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    image: netdata/netdata
    network_mode: host
    pid: host
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  nginx:
    build:
      context: ./nginx
    env_file:
      - .env
    healthcheck:
      test: curl -f http://localhost || exit 1
    image: ${IMAGE_BASE}/server-nginx
    restart: unless-stopped
    volumes:
      - ./certs:/etc/nginx/ssl:ro

  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    volumes:
      - portainer-data:/data
      - ${CERTS_DIR}/server.crt:/etc/ssl/certs/cacert.pem:ro
      - /var/run/docker.sock:/var/run/docker.sock

  prometheus:
    healthcheck:
      test: wget -qO- http://localhost:${PROMETHEUS_PORT} || exit 1
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus-data:/prometheus

  scoreboard:
    build:
      <<: *build-args
      context: ../..
      dockerfile: apps/server/scoreboard/Dockerfile
    environment:
      - PORT=${SCOREBOARD_PORT}
    env_file:
      - scoreboard/.env.local
    healthcheck:
      test: wget -qO- http://localhost:${SCOREBOARD_PORT}/api/trpc/health?input={} || exit 1
    image: ${IMAGE_BASE}/server-scoreboard
    restart: unless-stopped

  sonarqube:
    environment:
      - SONAR_JDBC_USERNAME=${DB_USER}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonarqube
    healthcheck:
      test: wget -qO- http://localhost:9000/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"' || exit 1
    image: sonarqube:10-community
    restart: unless-stopped
    volumes:
      - sonarqube-config:/opt/sonarqube/conf
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions

  tunnel:
    command:
      - tunnel
      - --no-autoupdate
      - run
      - --token
      - ${TUNNEL_TOKEN}
    image: cloudflare/cloudflared
    restart: unless-stopped

  vpn:
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - WG_HOST=${SERVER_ADDRESS}
      - PORT=${VPN_PORT}
      - PASSWORD=${VPN_PASSWORD}
      - UI_TRAFFIC_STATS=true
    image: ghcr.io/wg-easy/wg-easy
    ports:
      - 51820:51820/udp
    restart: unless-stopped
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    volumes:
      - vpn-data:/etc/wireguard

volumes:
  bitwarden-data:

  docker-registry:

  ghost-content:

  gitlab-config:
  gitlab-data:
  gitlab-runner-config:

  grafana-storage:
  grafana-config:

  mysql-data:

  navidrome-data:

  netdata-config:
  netdata-lib:
  netdata-cache:

  portainer-data:

  postgres-data:

  prometheus-data:

  sonarqube-config:
  sonarqube-data:
  sonarqube-extensions:

  vpn-data:
