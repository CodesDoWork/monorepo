services:
  auth:
    command: server
    container_name: ${AUTH_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    environment:
      AUTHENTIK_REDIS__HOST: ${CACHE_CONTAINER}
      AUTHENTIK_POSTGRESQL__HOST: ${DB_CONTAINER}
      AUTHENTIK_POSTGRESQL__USER: ${DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTH_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTH_SECRET_KEY}
    image: ${AUTH_IMAGE}
    networks:
      - auth
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates

  auth-worker:
    command: worker
    container_name: ${AUTH_WORKER_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    environment:
      AUTHENTIK_REDIS__HOST: ${CACHE_CONTAINER}
      AUTHENTIK_POSTGRESQL__HOST: ${DB_CONTAINER}
      AUTHENTIK_POSTGRESQL__USER: ${DB_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${AUTH_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${DB_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTH_SECRET_KEY}
    image: ${AUTH_IMAGE}
    networks:
      - auth
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
      - authentik-certs:/certs

  backup-service:
    container_name: ${BACKUP_SERVICE_CONTAINER}
    environment:
      - PORT=${BACKUP_SERVICE_PORT}
      - BASE_URL=https://backup.localhost
    healthcheck:
      test: wget -qO- http://localhost:${BACKUP_SERVICE_PORT}/health?input={} || exit 1
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-backup-service
    volumes:
      - ./backup-service/.snapshots:/.snapshots
      - ${BACKUP_PC_PATH}:/data/pc:ro
      - git-config:/data/services/git/config:ro
      - git-data:/data/services/git/data:ro
      - navidrome-data:/data/services/navidrome/data:ro
      - postgres-data:/data/services/db/data:ro
      - sonarqube-config:/data/services/sonarqube/config:ro
      - sonarqube-data:/data/services/sonarqube/data:ro
      - sonarqube-extensions:/data/services/sonarqube/extensions:ro
      - teamcity-data:/data/services/teamcity/data:ro

  cache:
    container_name: ${CACHE_CONTAINER}
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
    image: docker.io/library/redis:alpine
    networks:
      - auth
    volumes:
      - cache:/data

  db:
    container_name: ${DB_CONTAINER}
    environment:
      - POSTGRES_DB=${DB_DEFAULT_DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: pg_isready -U postgres
    image: postgres:15-alpine
    networks:
      - auth
      - cicd
      - git
      - scoreboard
    volumes:
      - postgres-data:/var/lib/postgresql/data

  docker-registry:
    container_name: ${DOCKER_REGISTRY_CONTAINER}
    healthcheck:
      test: wget -qO- http://localhost:${DOCKER_REGISTRY_PORT}/v2/ | grep -e "{}" || exit 1
    image: registry:2
    networks:
      - cicd
    volumes:
      - docker-registry:/var/lib/registry

  documentation:
    container_name: ${DOCUMENTATION_CONTAINER}
    healthcheck:
      test: wget -qO- http://localhost:${DOCUMENTATION_PORT} || exit 1
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-documentation
    networks:
      - documentation

  git:
    container_name: ${GIT_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl -f http://localhost:${GIT_PORT}/api/swagger || exit 1
    image: gitea/gitea:1-rootless
    networks:
      - cicd
      - git
    volumes:
      - git-config:/etc/gitea
      - git-data:/var/lib/gitea

  music:
    build: ./music # healthcheck implemented
    container_name: ${MUSIC_CONTAINER}
    env_file:
      - ./music/.env
    environment:
      - ND_PORT=${MUSIC_PORT}
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-music
    networks:
      - music
    volumes:
      - navidrome-data:/data
      - ${MUSIC_VOLUME}:/music:ro

  music-downloader:
    container_name: ${MUSIC_DOWNLOADER_CONTAINER}
    environment:
      - PORT=${MUSIC_DOWNLOADER_PORT}
      - BASE_URL=https://music-downloader.localhost
      - DOWNLOAD_DIR=/music/downloads
    healthcheck:
      test: wget -qO- http://localhost:${MUSIC_DOWNLOADER_PORT}/health?input={} || exit 1
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-music-downloader
    networks:
      - music
    volumes:
      - music-downloader-data:/app/.data
      - ${MUSIC_VOLUME}:/music

  renovate:
    container_name: renovate
    environment:
      - RENOVATE_TOKEN=${RENOVATE_TOKEN}
      - GIT_CONTAINER=${GIT_CONTAINER}
      - GIT_PORT=${GIT_PORT}
    image: renovate/renovate:35
    network_mode: host
    volumes:
      - ../../renovate/config.js:/usr/src/app/config.js

  renovate-dev:
    container_name: renovate-dev
    environment:
      - RENOVATE_TOKEN=${RENOVATE_TOKEN}
      - GIT_CONTAINER=${GIT_CONTAINER}
      - GIT_PORT=${GIT_PORT}
    image: renovate/renovate:35
    networks:
      - git
    volumes:
      - ../../renovate/config.js:/usr/src/app/config.js

  reverse-proxy:
    build: ./reverse-proxy
    container_name: ${REVERSE_PROXY_CONTAINER}
    env_file:
      - .env
    healthcheck:
      test: curl -f http://localhost || exit 1
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-reverse-proxy
    networks:
      - auth
      - cicd
      - documentation
      - music
      - scoreboard
    ports:
      - 80:80
      - 443:443

  scoreboard:
    container_name: ${SCOREBOARD_CONTAINER}
    environment:
      - PORT=${SCOREBOARD_PORT}
      - PG_PASSWORD=${DB_PASSWORD}
      - NEXTAUTH_URL=${SCOREBOARD_HOST}
      - NEXT_PUBLIC_API=${SCOREBOARD_HOST}
    env_file:
      - scoreboard/.env.local
    extra_hosts:
      - auth.localhost:host-gateway
    healthcheck:
      test: wget -qO- http://localhost:${SCOREBOARD_PORT}/api/trpc/health?input={} || exit 1
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-scoreboard
    networks:
      - scoreboard

  sonarqube:
    container_name: ${SONARQUBE_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SONAR_JDBC_USERNAME=${DB_USER}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}
      - SONAR_JDBC_URL=jdbc:postgresql://${DB_CONTAINER}:5432/sonarqube
    healthcheck:
      test: wget -qO- http://localhost:9000/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"' || exit 1
    image: sonarqube:9-community
    networks:
      - cicd
    volumes:
      - sonarqube-config:/opt/sonarqube/conf
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions

  teamcity-agent:
    build:
      context: ./teamcity-agent
      args:
        - DOCKER_REGISTRY_HOST=${DOCKER_REGISTRY_HOST}
    container_name: ${TEAMCITY_AGENT_CONTAINER}
    environment:
      - SERVER_URL=${TEAMCITY_CONTAINER}:${TEAMCITY_PORT}
      - DOCKER_IN_DOCKER=start
    extra_hosts:
      - ${VERDACCIO_HOST}:host-gateway
      - ${DOCKER_REGISTRY_HOST}:host-gateway
    image: ${DOCKER_REGISTRY_HOST}/codesdowork/monorepo-private/server-teamcity-agent
    networks:
      - cicd
    privileged: true
    volumes:
      - teamcity-agent-volumes:/var/lib/docker

  teamcity:
    container_name: ${TEAMCITY_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
    environment:
      - TEAMCITY_HTTPS_PROXY_ENABLED=true
    healthcheck:
      test: curl -f http://localhost:${TEAMCITY_PORT}/app/rest/version || exit 1
    image: jetbrains/teamcity-server:latest
    networks:
      - cicd
    volumes:
      - teamcity-data:/data/teamcity_server/datadir

  verdaccio:
    container_name: verdaccio
    environment:
      - VERDACCIO_PUBLIC_URL=https://${VERDACCIO_HOST}
    healthcheck:
      test: wget -qO- http://localhost:${VERDACCIO_PORT}/-/ping | grep -e "{}" || exit 1
    image: verdaccio/verdaccio:5
    networks:
      - cicd
    volumes:
      - verdaccio-storage:/verdaccio/storage
      - verdaccio-config:/verdaccio/conf
      - verdaccio-plugins:/verdaccio/plugins

volumes:
  authentik-media:
  authentik-templates:
  authentik-certs:

  cache:

  docker-registry:

  git-config:
  git-data:

  music-downloader-data:

  navidrome-data:

  postgres-data:

  sonarqube-config:
  sonarqube-data:
  sonarqube-extensions:

  teamcity-data:
  teamcity-agent-volumes:

  verdaccio-storage:
  verdaccio-config:
  verdaccio-plugins:

networks:
  auth:
    driver: bridge
  cache:
    driver: bridge
  cicd:
    driver: bridge
  documentation:
    driver: bridge
  git:
    driver: bridge
  music:
    driver: bridge
  scoreboard:
    driver: bridge
