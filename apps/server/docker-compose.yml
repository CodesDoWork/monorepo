x-build-args:
  build: &build-args
    args:
      - DOCKER_REGISTRY
      - ORGANIZATION
      - PROJECT

services:
  auth:
    command:
      - start
      - --db postgres
      - --db-url-host db
      - --db-username ${DB_USER}
      - --db-password ${DB_PASSWORD}
      - --hostname-path=${AUTH_BASE}
      - --hostname-strict=false
      - --http-relative-path=${AUTH_BASE}
      - --http-enabled=true
      - --health-enabled=true
      - --metrics-enabled=true
      - --features="docker,token-exchange"
      - --proxy=edge
    depends_on:
      db:
        condition: service_healthy
    environment:
      - KEYCLOAK_ADMIN=${AUTH_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${AUTH_PASSWORD}
    image: quay.io/keycloak/keycloak:22.0.3
    networks:
      - auth
    restart: unless-stopped

  backup-service:
    build:
      <<: *build-args
      cache_from:
        - type=registry,ref=${CACHE_BASE}/server-backup-service
      cache_to:
        - type=registry,ref=${CACHE_BASE}/server-backup-service,mode=max,compression=zstd
      context: ./backup-service
    environment:
      - PUID=0
      - GUID=0
      - TZ=${TZ}
    image: ${IMAGE_BASE}/server-backup-service
    restart: unless-stopped
    volumes:
      - ${BACKUP_VOLUME_PATH}/.snapshots:/.snapshots
      # - ${BACKUP_PC_PATH}:/data/pc:ro
      - docker-registry:/data/services/docker-registry/data:ro
      - gitlab-config:/data/services/gitlab/config:ro
      - gitlab-data:/data/services/gitlab/data:ro
      - gitlab-runner-config:/data/services/gitlab-runner/config:ro
      - grafana-storage:/data/services/grafana/storage:ro
      - grafana-config:/data/services/grafana/config:ro
      - linkstack-data:/data/services/linkstack/data:ro
      - navidrome-data:/data/services/navidrome/data:ro
      - netdata-config:/data/services/netdata/config:ro
      - netdata-lib:/data/services/netdata/lib:ro
      - netdata-cache:/data/services/netdata/cache:ro
      - portainer-data:/data/services/portainer/data:ro
      - postgres-data:/data/services/db/data:ro
      - prometheus-data:/data/services/prometheus/data:ro
      - sonarqube-config:/data/services/sonarqube/config:ro
      - sonarqube-data:/data/services/sonarqube/data:ro
      - sonarqube-extensions:/data/services/sonarqube/extensions:ro

  dashboard:
    build:
      <<: *build-args
      context: ./dashboard
    image: ${IMAGE_BASE}/server-dashboard
    networks:
      - dashboard
    restart: unless-stopped

  db:
    environment:
      - POSTGRES_DB=${DB_DEFAULT_DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
    healthcheck:
      test: pg_isready -U $DB_USER
    image: postgres:15-alpine
    networks:
      - auth
      - cicd
      - scoreboard
      - sonar
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data

  docker-registry:
    environment:
      - REGISTRY_AUTH_TOKEN_REALM=https://${DOMAIN}${AUTH_BASE}/realms/${AUTH_REALM}/protocol/docker-v2/auth
      - REGISTRY_AUTH_TOKEN_SERVICE=docker-registry
      - REGISTRY_AUTH_TOKEN_ISSUER=https://${DOMAIN}${AUTH_BASE}/realms/${AUTH_REALM}
      - REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE=/opt/certs/trust_chain.pem
    healthcheck:
      test: wget -S http://localhost:${DOCKER_REGISTRY_PORT}/v2/ 2>&1 | grep "401 Unauthorized" || exit 1
    image: registry:2
    networks:
      - cicd
    restart: unless-stopped
    volumes:
      - docker-registry:/var/lib/registry
      - ./docker-registry/certs:/opt/certs:ro

  documentation:
    build:
      <<: *build-args
      context: ./documentation
    healthcheck:
      test: wget -qO- http://localhost:${DOCUMENTATION_PORT} || exit 1
    image: ${IMAGE_BASE}/server-documentation
    networks:
      - documentation
    restart: unless-stopped

  doku:
    image: amerkurev/doku
    networks:
      - doku
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/hostroot:ro

  gitlab:
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://${DOMAIN}${GITLAB_BASE}'
        letsencrypt['enabled'] = false
        nginx['enable'] = true
        nginx['listen_https'] = false
        nginx['listen_port'] = ${GITLAB_PORT}
        gitlab_rails['omniauth_enabled'] = true
        gitlab_rails['omniauth_allow_single_sign_on'] = ['openid_connect']
        gitlab_rails['omniauth_block_auto_created_users'] = false
        gitlab_rails['omniauth_auto_link_ldap_user'] = true
        gitlab_rails['omniauth_providers'] = [
          {
            "name" => "openid_connect",
            "label" => "Keycloak",
            "args" => {
              "name" => "openid_connect",
              "scope" => ["openid", "profile", "email"],
              "uid_field" => "email",
              "response_type" => "code",
              "issuer" => "https://${DOMAIN}${AUTH_BASE}/realms/${AUTH_REALM}",
              "discovery" => true,
              "client_auth_method" => "query",
              "client_options" => {
                "identifier" => "${GITLAB_AUTH_CLIENT_ID}",
                "secret" => "${GITLAB_AUTH_CLIENT_SECRET}",
                "redirect_uri" => "https://${DOMAIN}${GITLAB_BASE}/users/auth/openid_connect/callback"
              }
            }
          }
        ]
        puma['worker_processes'] = 0
        sidekiq['max_concurrency'] = 10
        gitaly['configuration'] = {
            concurrency: [
              {
                'rpc' => "/gitaly.SmartHTTPService/PostReceivePack",
                'max_per_repo' => 3,
              }, {
                'rpc' => "/gitaly.SSHService/SSHUploadPack",
                'max_per_repo' => 3,
              },
            ]
        }
        gitaly['env'] = {
          'GITALY_COMMAND_SPAWN_MAX_PARALLEL' => '2',
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
        }
        gitlab_rails['env'] = {
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
        }
    image: gitlab/gitlab-ee:latest
    networks:
      - cicd
    restart: unless-stopped
    shm_size: "256m"
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-data:/var/opt/gitlab

  gitlab-runner:
    image: gitlab/gitlab-runner
    restart: unless-stopped
    volumes:
      - gitlab-runner-config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
    healthcheck:
      test: curl -fs http://localhost:${GRAFANA_PORT}/api/health | grep "ok" || exit 1
    image: grafana/grafana
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - grafana-storage:/var/lib/grafana
      - grafana-config:/usr/share/grafana/conf

  linkstack:
    environment:
      TZ: ${TZ}
    image: linkstackorg/linkstack
    networks:
      - linkstack
      - tunnel
    restart: unless-stopped
    volumes:
      - linkstack-data:/htdocs

  music:
    build:
      <<: *build-args
      cache_from:
        - type=registry,ref=${CACHE_BASE}/server-music
      cache_to:
        - type=registry,ref=${CACHE_BASE}/server-music,mode=max,compression=zstd
      context: ./music # healthcheck implemented
    env_file:
      - ./music/.env
    environment:
      - ND_BASEURL=${MUSIC_BASE}
      - ND_PORT=${MUSIC_PORT}
      - ND_REVERSEPROXYUSERHEADER=${NGINX_AUTH_USERNAME_HEADER}
      - ND_REVERSEPROXYWHITELIST=${MUSIC_SUBNET}
    image: ${IMAGE_BASE}/server-music
    networks:
      - music
    restart: unless-stopped
    volumes:
      - navidrome-data:/data
      - ${MUSIC_VOLUME}:/music:ro

  music-downloader:
    build:
      <<: *build-args
      context: ./music-downloader
    environment:
      - NEXT_PUBLIC_BASE_PATH=${MUSIC_DOWNLOADER_BASE}
      - DOWNLOAD_DIR=/music/downloads
      - PORT=${MUSIC_DOWNLOADER_PORT}
    healthcheck:
      test: wget -qO- http://localhost:${MUSIC_DOWNLOADER_PORT}${MUSIC_DOWNLOADER_BASE}/api/trpc/health?input={} || exit 1
    image: ${IMAGE_BASE}/server-music-downloader
    networks:
      - music
    restart: unless-stopped
    volumes:
      - ${MUSIC_VOLUME}/downloads:/music/downloads

  netdata:
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    image: netdata/netdata
    network_mode: host
    pid: host
    restart: unless-stopped
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdata-config:/etc/netdata
      - netdata-lib:/var/lib/netdata
      - netdata-cache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  nginx:
    build:
      <<: *build-args
      cache_from:
        - type=registry,ref=${CACHE_BASE}/server-nginx
      cache_to:
        - type=registry,ref=${CACHE_BASE}/server-nginx,mode=max,compression=zstd
      context: ./nginx
    env_file:
      - .env
    healthcheck:
      test: curl -f http://localhost || exit 1
    image: ${IMAGE_BASE}/server-nginx
    networks:
      auth:
      cicd:
      dashboard:
      documentation:
      doku:
      linkstack:
      music:
        ipv4_address: ${NGINX_MUSIC_IP}
      monitoring:
      portainer:
      scoreboard:
      ssh:
      tunnel:
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped

  portainer:
    command:
      - --base-url="${PORTAINER_BASE}"
    image: portainer/portainer-ce:latest
    networks:
      - portainer
    restart: unless-stopped
    volumes:
      - portainer-data:/data
      - ${CERTS_DIR}/server.crt:/etc/ssl/certs/cacert.pem:ro
      - /var/run/docker.sock:/var/run/docker.sock

  prometheus:
    build:
      <<: *build-args
      cache_from:
        - type=registry,ref=${CACHE_BASE}/server-prometheus
      cache_to:
        - type=registry,ref=${CACHE_BASE}/server-prometheus,mode=max,compression=zstd
      context: ./prometheus
    healthcheck:
      test: wget -qO- http://localhost:${PROMETHEUS_PORT} || exit 1
    image: ${IMAGE_BASE}/server-prometheus
    networks:
      - monitoring
    volumes:
      - prometheus-data:/prometheus

  renovate:
    build:
      <<: *build-args
      context: ./renovate
    container_name: renovate
    environment:
      - RENOVATE_TOKEN=${RENOVATE_TOKEN}
      - GIT_URL=https://${DOMAIN}${GITLAB_BASE}
      - GITHUB_COM_TOKEN=${RENOVATE_GITHUB_COM_TOKEN}
    image: ${IMAGE_BASE}/server-renovate

  scoreboard:
    build:
      <<: *build-args
      context: ./scoreboard
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=${SCOREBOARD_PORT}
      - PG_PASSWORD=${DB_PASSWORD}
      - NEXTAUTH_URL=https://${DOMAIN}${SCOREBOARD_BASE}/api/auth
      - NEXT_PUBLIC_API=https://${DOMAIN}${SCOREBOARD_BASE}
      - BASE_PATH=${SCOREBOARD_BASE}
      - AUTH_CLIENT_ID=${SCOREBOARD_AUTH_CLIENT_ID}
      - AUTH_CLIENT_SECRET=${SCOREBOARD_AUTH_CLIENT_SECRET}
      - AUTH_ISSUER=https://${DOMAIN}${AUTH_BASE}/realms/${AUTH_REALM}
    env_file:
      - scoreboard/.env.local
    healthcheck:
      test: wget -qO- http://localhost:${SCOREBOARD_PORT}${SCOREBOARD_BASE}/api/trpc/health?input={} || exit 1
    image: ${IMAGE_BASE}/server-scoreboard
    networks:
      - scoreboard
    restart: unless-stopped

  sonarqube:
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SONAR_JDBC_USERNAME=${DB_USER}
      - SONAR_JDBC_PASSWORD=${DB_PASSWORD}
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonarqube
      - SONAR_WEB_CONTEXT=${SONARQUBE_BASE}
    healthcheck:
      test: wget -qO- http://localhost:9000${SONARQUBE_BASE}/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"' || exit 1
    image: sonarqube:9-community
    networks:
      - cicd
      - sonar
    restart: unless-stopped
    volumes:
      - sonarqube-config:/opt/sonarqube/conf
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions

  ssh:
    build:
      <<: *build-args
      cache_from:
        - type=registry,ref=${CACHE_BASE}/server-ssh
      cache_to:
        - type=registry,ref=${CACHE_BASE}/server-ssh,mode=max,compression=zstd
      context: ./ssh
    healthcheck:
      test: wget -S http://localhost:${SSH_PORT} 2>&1 | grep "200 OK" || exit 1
    image: ${IMAGE_BASE}/server-ssh
    environment:
      - BASE_PATH=${SSH_BASE}
    networks:
      - ssh
    restart: unless-stopped

  tunnel:
    command:
      - tunnel
      - --no-autoupdate
      - run
      - --token
      - ${TUNNEL_TOKEN}
    image: cloudflare/cloudflared
    networks:
      - tunnel
    restart: unless-stopped

volumes:
  docker-registry:

  gitlab-config:
  gitlab-data:
  gitlab-runner-config:

  grafana-storage:
  grafana-config:

  linkstack-data:

  navidrome-data:

  netdata-config:
  netdata-lib:
  netdata-cache:

  portainer-data:

  postgres-data:

  prometheus-data:

  sonarqube-config:
  sonarqube-data:
  sonarqube-extensions:

networks:
  auth:
  cicd:
  dashboard:
  documentation:
  doku:
  linkstack:
  music:
    ipam:
      config:
        - subnet: ${MUSIC_SUBNET}
          gateway: ${MUSIC_GATEWAY}
  monitoring:
  portainer:
  scoreboard:
  sonar:
  ssh:
  tunnel:
