variables_hash_max_size 2024;
variables_hash_bucket_size 128;

server {
    set_by_lua_block $domain { return os.getenv("DOMAIN") }
    set_by_lua_block $tunnel_domain { return os.getenv("TUNNEL_DOMAIN") }

	listen 80;
	listen [::]:80;
	server_name $domain $tunnel_domain;
    return 301 https://$host$request_uri;
}

map $http_host $host_or_tunnel {
    default $http_host;
    $nginx_container $tunnel_domain;
}

server {
    set_by_lua_block $domain { return os.getenv("DOMAIN") }
    set_by_lua_block $tunnel_domain { return os.getenv("TUNNEL_DOMAIN") }

    set_by_lua_block $nginx_container { return os.getenv("NGINX_CONTAINER") }

    set_by_lua_block $dashboard_container { return os.getenv("DASHBOARD_CONTAINER") }
    set_by_lua_block $dashboard_port { return os.getenv("DASHBOARD_PORT") }

    set_by_lua_block $auth_base { return os.getenv("AUTH_BASE") }
    set_by_lua_block $auth_container { return os.getenv("AUTH_CONTAINER") }
    set_by_lua_block $auth_port { return os.getenv("AUTH_PORT") }
    set_by_lua_block $auth_realm { return os.getenv("AUTH_REALM") }

    set_by_lua_block $docker_registry_container { return os.getenv("DOCKER_REGISTRY_CONTAINER") }
    set_by_lua_block $docker_registry_port { return os.getenv("DOCKER_REGISTRY_PORT") }

    set_by_lua_block $documentation_base { return os.getenv("DOCUMENTATION_BASE") }
    set_by_lua_block $documentation_container { return os.getenv("DOCUMENTATION_CONTAINER") }
    set_by_lua_block $documentation_port { return os.getenv("DOCUMENTATION_PORT") }

    set_by_lua_block $gitlab_base { return os.getenv("GITLAB_BASE") }
    set_by_lua_block $gitlab_container { return os.getenv("GITLAB_CONTAINER") }
    set_by_lua_block $gitlab_port { return os.getenv("GITLAB_PORT") }

    set_by_lua_block $music_base { return os.getenv("MUSIC_BASE") }
    set_by_lua_block $music_container { return os.getenv("MUSIC_CONTAINER") }
    set_by_lua_block $music_port { return os.getenv("MUSIC_PORT") }

    set_by_lua_block $music_downloader_base { return os.getenv("MUSIC_DOWNLOADER_BASE") }
    set_by_lua_block $music_downloader_container { return os.getenv("MUSIC_DOWNLOADER_CONTAINER") }
    set_by_lua_block $music_downloader_port { return os.getenv("MUSIC_DOWNLOADER_PORT") }

    set_by_lua_block $nginx_auth_username_header { return os.getenv("NGINX_AUTH_USERNAME_HEADER") }
    set_by_lua_block $nginx_auth_client_id { return os.getenv("NGINX_AUTH_CLIENT_ID") }
    set_by_lua_block $nginx_auth_client_secret { return os.getenv("NGINX_AUTH_CLIENT_SECRET") }

    set_by_lua_block $portainer_base { return os.getenv("PORTAINER_BASE") }
    set_by_lua_block $portainer_container { return os.getenv("PORTAINER_CONTAINER") }
    set_by_lua_block $portainer_port { return os.getenv("PORTAINER_PORT") }

    set_by_lua_block $scoreboard_base { return os.getenv("SCOREBOARD_BASE") }
    set_by_lua_block $scoreboard_container { return os.getenv("SCOREBOARD_CONTAINER") }
    set_by_lua_block $scoreboard_port { return os.getenv("SCOREBOARD_PORT") }

    set_by_lua_block $sonarqube_base { return os.getenv("SONARQUBE_BASE") }
    set_by_lua_block $sonarqube_container { return os.getenv("SONARQUBE_CONTAINER") }
    set_by_lua_block $sonarqube_port { return os.getenv("SONARQUBE_PORT") }

    set_by_lua_block $ssh_base { return os.getenv("SSH_BASE") }
    set_by_lua_block $ssh_base_dir { return os.getenv("SSH_BASE"):gsub("/", "") }
    set_by_lua_block $ssh_container { return os.getenv("SSH_CONTAINER") }
    set_by_lua_block $ssh_port { return os.getenv("SSH_PORT") }

    set_by_lua_block $verdaccio_base { return os.getenv("VERDACCIO_BASE") }
    set_by_lua_block $verdaccio_container { return os.getenv("VERDACCIO_CONTAINER") }
    set_by_lua_block $verdaccio_port { return os.getenv("VERDACCIO_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $domain $tunnel_domain;

    access_by_lua_block {
        if not ngx.re.find(ngx.var.request_uri, "^/(auth|v2|gitlab|portainer|music/rest|scoreboard|sonar|npm)") then
            local host_or_tunnel
            if ngx.var.http_host == ngx.var.nginx_container then
                host_or_tunnel = ngx.var.tunnel_domain
            else
                host_or_tunnel = ngx.var.http_host
            end

            local opts = {
                redirect_uri_path = "/callback-auth",
                accept_none_alg = true,
                discovery = "https://" .. host_or_tunnel .. "/auth/realms/" .. ngx.var.auth_realm .. "/.well-known/openid-configuration",
                client_id = ngx.var.nginx_auth_client_id,
                client_secret = ngx.var.nginx_auth_client_secret,
                logout_path = "/logout",
                redirect_after_logout_uri = "https://" .. host_or_tunnel .. "/auth/realms/" .. ngx.var.auth_realm .. "/protocol/openid-connect/logout",
                session_contents = {id_token=true},
                ssl_verify = "no"
            }

            local res, err, url, session = require("resty.openidc").authenticate(opts)
            if err then
                ngx.status = 403
                ngx.say(err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            ngx.req.set_header(ngx.var.nginx_auth_username_header, res.id_token.preferred_username)
        end
    }

    location / {
        set $upstream $dashboard_container:$dashboard_port;
        proxy_pass http://$upstream;
    }

    location /auth {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Protocol https;
        proxy_set_header Host $host_or_tunnel;
        set $upstream $auth_container:$auth_port;
        proxy_pass http://$upstream;
    }

    location /v2 {
        client_max_body_size 1G;
        proxy_http_version 1.1;
        proxy_read_timeout 900;
        set $upstream $docker_registry_container:$docker_registry_port;
        proxy_pass http://$upstream;
    }

    location /docs {
    	set $upstream $documentation_container:$documentation_port;
    	proxy_pass http://$upstream;
    }

    location /fritz {
        rewrite /fritz/?(.*) /$1 break;
        proxy_pass https://192.168.188.1;
        proxy_set_header Host fritz.box;
        sub_filter /logincheck.lua /fritz/logincheck.lua;
        sub_filter /login.lua /fritz/login.lua;
        sub_filter /home.lua /fritz/home.lua;
        sub_filter /home/ /fritz/home/;
        sub_filter /internet/ /fritz/internet/;
        sub_filter /fon_num/ /fritz/fon_num/;
        sub_filter /net/ /fritz/net/;
        sub_filter /wlan/ /fritz/wlan/;
        sub_filter /dect/ /ftiz/dect/;
        sub_filter /system/ /fritz/system/;
        sub_filter /nas /fritz/nas;
        sub_filter '<!--<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />-->' '<link rel="shortcut icon" type="image/x-icon" href="/fritz/favicon.ico" />';
        sub_filter 'href="/css' 'href="/fritz/css';
        sub_filter 'src="/css' 'src="/fritz/css';
        sub_filter 'src="/js' 'src="/fritz/js';
        sub_filter_once off;
    }

    location /gitlab {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Protocol https;
        proxy_set_header Host $host_or_tunnel;
        client_max_body_size 100M;
        set $upstream $gitlab_container:$gitlab_port;
        proxy_pass http://$upstream;
    }

    location /music {
    	set $upstream $music_container:$music_port;
        proxy_pass http://$upstream;
    }

    location /music-downloader {
    	set $upstream $music_downloader_container:$music_downloader_port;
        proxy_pass http://$upstream;
    }

    location /portainer {
        set $upstream $portainer_container:$portainer_port;
        proxy_pass http://$upstream;
        rewrite /portainer/?(.*) /$1 break;
    }

    location /scoreboard {
    	set $upstream $scoreboard_container:$scoreboard_port;
        proxy_pass http://$upstream;
    }

    location /sonar {
    	set $upstream $sonarqube_container:$sonarqube_port;
        proxy_pass http://$upstream;
    }

    location /ssh {
        set $upstream $ssh_container:$ssh_port;
        proxy_pass http://$upstream;
        rewrite /ssh/?(.*) /$1 break;
        proxy_http_version 1.1;
        proxy_read_timeout 86400s;
        sub_filter static/ ssh/static/;
        sub_filter_once off;
    }

    location ~ ^/npm/?(.*)$ {
        proxy_set_header X-NginX-Proxy true;
    	set $upstream $verdaccio_container:$verdaccio_port;
        proxy_pass http://$upstream/$1?$args;
        proxy_redirect off;
    }
}
