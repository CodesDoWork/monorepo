variables_hash_max_size 2024;
variables_hash_bucket_size 128;

server {
    set_by_lua_block $domain { return os.getenv("DOMAIN") }

	listen 80;
	listen [::]:80;
    return 301 https://$host$request_uri;
}

server {
    set_by_lua_block $domain { return os.getenv("DOMAIN") }

    set_by_lua_block $auth_base { return os.getenv("AUTH_BASE") }
    set_by_lua_block $auth_port { return os.getenv("AUTH_PORT") }

    set_by_lua_block $docker_registry_port { return os.getenv("DOCKER_REGISTRY_PORT") }

    set_by_lua_block $documentation_base { return os.getenv("DOCUMENTATION_BASE") }
    set_by_lua_block $documentation_port { return os.getenv("DOCUMENTATION_PORT") }

    set_by_lua_block $gitlab_base { return os.getenv("GITLAB_BASE") }
    set_by_lua_block $gitlab_port { return os.getenv("GITLAB_PORT") }

    set_by_lua_block $linkstack_port { return os.getenv("LINKSTACK_PORT") }

    set_by_lua_block $music_base { return os.getenv("MUSIC_BASE") }
    set_by_lua_block $music_port { return os.getenv("MUSIC_PORT") }

    set_by_lua_block $music_downloader_base { return os.getenv("MUSIC_DOWNLOADER_BASE") }
    set_by_lua_block $music_downloader_port { return os.getenv("MUSIC_DOWNLOADER_PORT") }

    set_by_lua_block $portainer_base { return os.getenv("PORTAINER_BASE") }
    set_by_lua_block $portainer_port { return os.getenv("PORTAINER_PORT") }

    set_by_lua_block $scoreboard_base { return os.getenv("SCOREBOARD_BASE") }
    set_by_lua_block $scoreboard_port { return os.getenv("SCOREBOARD_PORT") }

    set_by_lua_block $sonarqube_base { return os.getenv("SONARQUBE_BASE") }
    set_by_lua_block $sonarqube_port { return os.getenv("SONARQUBE_PORT") }

    set_by_lua_block $ssh_base { return os.getenv("SSH_BASE") }
    set_by_lua_block $ssh_base_dir { return os.getenv("SSH_BASE"):gsub("/", "") }
    set_by_lua_block $ssh_port { return os.getenv("SSH_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name justin.konratts.de;

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-VerifiedViaNginx yes;
        set $upstream linkstack:$linkstack_port;
        proxy_pass http://$upstream;
    }

    location /auth {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Protocol https;
        proxy_set_header Host justin.konratts.de;
        set $upstream auth:$auth_port;
        proxy_pass http://$upstream;
    }

    location /callback-auth {
        access_by_lua_file /etc/nginx/lua/access.lua;
    }

    location /logout {
        access_by_lua_file /etc/nginx/lua/access.lua;
    }

    location /v2 {
        client_max_body_size 1G;
        set $upstream docker-registry:$docker_registry_port;
        proxy_pass http://$upstream;
    }

    location /docs {
        access_by_lua_file /etc/nginx/lua/access.lua;
    	set $upstream documentation:$documentation_port;
    	proxy_pass http://$upstream;
    }

    location /gitlab {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Protocol https;
        proxy_set_header Host $host;
        client_max_body_size 100M;
        set $upstream gitlab:$gitlab_port;
        proxy_pass http://$upstream;
    }

    location /music/rest {
        set $upstream music:$music_port;
        proxy_pass http://$upstream;
    }

    location /music {
        access_by_lua_file /etc/nginx/lua/access.lua;
    	set $upstream music:$music_port;
        proxy_pass http://$upstream;
    }

    location /music-downloader {
        access_by_lua_file /etc/nginx/lua/access.lua;
    	set $upstream music-downloader:$music_downloader_port;
        proxy_pass http://$upstream;
    }

    location /portainer {
        set $upstream portainer:$portainer_port;
        proxy_pass http://$upstream;
        rewrite /portainer/?(.*) /$1 break;
    }

    location /scoreboard {
    	set $upstream scoreboard:$scoreboard_port;
        proxy_pass http://$upstream;
    }

    location /sonar {
    	set $upstream sonarqube:$sonarqube_port;
        proxy_pass http://$upstream;
    }

    location /ssh {
        access_by_lua_file /etc/nginx/lua/access.lua;
        set $upstream ssh:$ssh_port;
        proxy_pass http://$upstream;
        rewrite /ssh/?(.*) /$1 break;
        proxy_http_version 1.1;
        proxy_read_timeout 86400s;
        sub_filter static/ ssh/static/;
        sub_filter_once off;
    }
}

server {
    set_by_lua_block $dashboard_port { return os.getenv("DASHBOARD_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-dashy.konratts.de;

    access_by_lua_file /etc/nginx/lua/access.lua;

    location / {
        set $upstream dashboard:$dashboard_port;
        proxy_pass http://$upstream;
    }
}

server {
    set_by_lua_block $doku_port { return os.getenv("DOKU_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-doku.konratts.de;

    access_by_lua_file /etc/nginx/lua/access.lua;

    location / {
        set $upstream doku:$doku_port;
        proxy_pass http://$upstream;
    }
}

server {
    set_by_lua_block $netdata_port { return os.getenv("NETDATA_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-netdata.konratts.de;

    access_by_lua_file /etc/nginx/lua/access.lua;

    location / {
        set $upstream server.fritz.box:$netdata_port;
        proxy_pass http://$upstream;
    }
}

server {
    set_by_lua_block $prometheus_port { return os.getenv("PROMETHEUS_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-prometheus.konratts.de;

    access_by_lua_file /etc/nginx/lua/access.lua;

    location / {
        set $upstream prometheus:$prometheus_port;
        proxy_pass http://$upstream;
    }
}

server {
    set_by_lua_block $grafana_port { return os.getenv("GRAFANA_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-grafana.konratts.de;

    access_by_lua_file /etc/nginx/lua/access.lua;

    location / {
        set $upstream grafana:$grafana_port;
        proxy_pass http://$upstream;
    }
}

server {
    set_by_lua_block $bitwarden_port { return os.getenv("BITWARDEN_PORT") }

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name just-bw.konratts.de;

    location / {
        set $upstream bitwarden:$bitwarden_port;
        proxy_pass http://$upstream;
    }
}
