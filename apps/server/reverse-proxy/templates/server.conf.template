server {
	listen 80;
	listen [::]:80;
	server_name ${REVERSE_PROXY_HOST} *.${REVERSE_PROXY_HOST};
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${REVERSE_PROXY_HOST};

    location / {
        root /usr/share/nginx/html;
       	index index.html;
     	try_files $uri $uri/ =404;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name dockerreg.${REVERSE_PROXY_HOST};

    location / {
        client_max_body_size 1G;
        set $upstream ${DOCKER_REGISTRY_CONTAINER}:${DOCKER_REGISTRY_PORT};
        proxy_pass http://$upstream;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name docs.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${DOCUMENTATION_CONTAINER}:${DOCUMENTATION_PORT};
		proxy_pass http://$upstream;
	}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name git.${REVERSE_PROXY_HOST};

    location / {
        add_header Content-Security-Policy "default-src 'self' http: https: ws: wss: data: 'unsafe-eval' blob: 'unsafe-inline'; frame-ancestors 'self';" always;
        client_max_body_size 100M;

        set $upstream ${GIT_CONTAINER}:${GIT_PORT};
        proxy_pass http://$upstream;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name music.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${MUSIC_CONTAINER}:${MUSIC_PORT};
        proxy_pass http://$upstream;
	}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name music-downloader.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${MUSIC_DOWNLOADER_CONTAINER}:${MUSIC_DOWNLOADER_PORT};
        proxy_pass http://$upstream;
	}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name sonar.ci.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${SONARQUBE_CONTAINER}:${SONARQUBE_PORT};
        proxy_pass http://$upstream;
	}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name teamcity.ci.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${TEAMCITY_CONTAINER}:${TEAMCITY_PORT};
        proxy_pass http://$upstream;
	}
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name npmreg.${REVERSE_PROXY_HOST};

    location / {
		set $upstream ${VERDACCIO_CONTAINER}:${VERDACCIO_PORT};
        proxy_pass http://$upstream;
	}
}
